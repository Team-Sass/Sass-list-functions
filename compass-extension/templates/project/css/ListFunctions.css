/* ------------------------------------------------------------------------------- *
 * A couple of advanced Sass list functions
 * ------------------------------------------------------------------------------- *
 *
 * chunk($list, $size)
 * Chunk $list into $size large lists
 *
 * count-values($list)
 * Count the number of occurrences of each value of $list
 *
 * debug($list)
 * Returns $list as a string
 *
 * first($list)
 * Return first element of $list
 *
 * insert-nth($list, $index, $value)
 * Add $value at $index in $list
 *
 * is-symmetrical($list)
 * Check if $list is symmetrical
 * 
 * last($list)
 * Return last element of $list
 *
 * last-index($list, $value)
 * Return last index of $value in $list
 *
 * loop($list, $value: 1)
 * Shift indexes from $list of $value
 *
 * prepend($list, $value)
 * Add $value as first index of $list
 *
 * purge($list)
 * Remove all false and null values from $list
 *
 * remove($list, $value, $recursive: false)
 * Remove value(s) $value from $list
 *
 * remove-duplicates($list, $recursive: false)
 * Remove duplicate values from $list
 *
 * remove-nth($list, $index)
 * Remove value from $list at index $index
 *
 * replace($list, $old-value, $new-value, $recursive: false)
 * Replace $old-value by $new-value in $list
 *
 * replace-nth($list, $index, $value)
 * Replace value at $index from $list by $value
 *
 * reverse($list, $recursive: false)
 * Reverse the order of $list
 *
 * slice($list, $start: 1, $end: length($list))
 * Slice $list between $start and $end
 *
 * sum($list, $force: false)
 * Sum up all unitless values in $list
 *
 * to-string($list, $glue: '', $is-nested: false)
 * Join all elements of $list with $glue
 *
 * ------------------------------------------------------------------------------- *
 * CodePen (SCSS): http://codepen.io/HugoGiraudel/pen/loAgq
 * CodePen (Sass): http://codepen.io/HugoGiraudel/pen/BskrE
 * Repository: https://github.com/Team-Sass/Sass-ListFunctions/
 * ------------------------------------------------------------------------------- */
/** 
 * Chunk $list into $size large lists
 * -------------------------------------------------------------------------------
 * @example chunk( (a, b, c, d, e), 2 ) => a b, c d, e
 * @example chunk( (a, b, c, d, e), 3 ) => a b c, d e
 * @example chunk( a, 3 )               => a
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $size [Number] : length of lists
 * -------------------------------------------------------------------------------
 * @return [List]
 */
/** 
 * Count the number of occurrences of each value of $list
 * -------------------------------------------------------------------------------
 * @dependence `replace-nth()`
 * -------------------------------------------------------------------------------
 * @example count-values( (a, b, c, d, e) ) 			=> a 1, b 1, c 1, d 1, e 1
 * @example count-values( (a, b, c, a, d, b, a, e) ) 	=> a 3, b 2, c 1, d 1, e 1
 * @example count-values( a ) 							=> a 1
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * -------------------------------------------------------------------------------
 * @return [List]
 */
/** 
 * Returns $list as a string
 * -------------------------------------------------------------------------------
 * @example debug( (a, b, c, d, e) ) => [ a, b, c, d, e ]
 * @example debug( (a b (c d e) ) )  => [ a, b, [ c, d, e ] ]
 * @example debug( a )               => [ a ]
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * -------------------------------------------------------------------------------
 * @return [String]
 */
/**
 * Returns first element of $list
 * -------------------------------------------------------------------------------
 * @example first( (a, b, c) ) 	=> a
 * @example first( a ) 			=> a
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * -------------------------------------------------------------------------------
 * @return [Literal]
 */
/** 
 * Add $value at $index in $list
 * -------------------------------------------------------------------------------
 * @dependence `purge()`
 * -------------------------------------------------------------------------------
 * @example insert-nth( (a, b, c),  2, z ) => a, z, b, c
 * @example insert-nth( (a, b, c),  0, z ) => error
 * @example insert-nth( (a, b, c), -1, z ) => error
 * @example insert-nth( (a, b, c), 10, z ) => error
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $index [Number] : index to add
 * @param $value [Literal] : value to add
 * -------------------------------------------------------------------------------
 * @raise [Error] if $index isn't an integer
 * @raise [Error] if $index is strictly lesser than 1
 * @raise [Error] if $index is strictly greater than length of $list
 * -------------------------------------------------------------------------------
 * @return [List] | false
 */
/**
 * Test if $list is symmetrical (one-level deep)
 * -------------------------------------------------------------------------------
 * @dependence `reverse()`
 * -------------------------------------------------------------------------------
 * @example is-symmetrical( (a, b, c, d, e) ) => false
 * @example is-symmetrical( (a, b, c, b, a) ) => true
 * @example is-symmetrical( a )               => true
 * @example is-symmetrical( a, b c d, a )     => true
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * -------------------------------------------------------------------------------
 * @return [Boolean]
 */
/**
 * Returns last element of $list
 * -------------------------------------------------------------------------------
 * @example last( (a, b, c) ) => c
 * @example last( a )         => a
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * -------------------------------------------------------------------------------
 * @return [Literal]
 */
/**
 * Returns last index of $value in $list
 * -------------------------------------------------------------------------------
 * @example last-index( (a, b, c, a), a ) => 4
 * @example last-index( (a, b, c), z )    => null
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $value [Literal] : value to be searched for
 * -------------------------------------------------------------------------------
 * @return [Number] | null
 */
/**
 * Shift indexes from $list of $value
 * -------------------------------------------------------------------------------
 * @example loop( (a, b, c, d, e) )     => e, a, b, c, d
 * @example loop( (a, b, c, d, e),  2 ) => d, e, a, b, c
 * @example loop( (a, b, c, d, e), -2 ) => c, d, e, a, b
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $value [Number] : number of position between old and new indexes
 * -------------------------------------------------------------------------------
 * @return [List]
 */
/**
 * Add $value as first index of $list
 * -------------------------------------------------------------------------------
 * @dependence `purge()`
 * -------------------------------------------------------------------------------
 * @example prepend( (a, b, c), z )   => z, a, b, c
 * @example prepend( (a, b, c), y z ) => y z, a, b, c
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $value [Literal] : value to prepend to the list
 * -------------------------------------------------------------------------------
 * @return [List]
 */
/**
 * Remove all false and null values from $list
 * -------------------------------------------------------------------------------
 * @example purge( (a, null, b, false, c, null) ) => a, b, c
 * @example purge( (a, b, c) )                    => a, b, c
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * -------------------------------------------------------------------------------
 * @return [List]
 */
/**
 * Remove value(s) $value from $list
 * -------------------------------------------------------------------------------
 * @dependence `replace()`
 * -------------------------------------------------------------------------------
 * @example remove( (a, b, c),   b )       => a, c
 * @example remove( (a, b, c),   z )       => a, b, c
 * @example remove( (a, b, c b), b )       => a, c b
 * @example remove( (a, b, c b), b, true ) => a, c
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $value [Literal] : value to remove
 * @param $recursive [Boolean] : enable / disable recursivity
 * -------------------------------------------------------------------------------
 * @return [List]
 */
/** 
 * Remove duplicate values from $list
 * -------------------------------------------------------------------------------
 * @example remove-duplicates( (a, b, a, c, b, d, c, e) ) => a, b, c, d, e
 * @example remove-duplicates( (a, b, (c, c, c)) )        => a, b, c
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $recursive [Boolean] : enable / disable recursivity
 * -------------------------------------------------------------------------------
 * @return [List]
 */
/**
 * Remove value from $list at index $index
 * -------------------------------------------------------------------------------
 * @dependence `replace-nth()`
 * -------------------------------------------------------------------------------
 * @example remove-nth( (a, b, c),   2 ) => a, c
 * @example remove-nth( (a, b, c),   0 ) => error
 * @example remove-nth( (a, b, c),  -1 ) => a, b
 * @example remove-nth( (a, b, c),  10 ) => error
 * @example remove-nth( (a, b, c), -10 ) => error
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $index [Number] : index to remove
 * -------------------------------------------------------------------------------
 * @raise [Error] if $index isn't an integer
 * @raise [Error] if $index is 0
 * @raise [Error] if abs value of $index is strictly greater then length of $list
 * -------------------------------------------------------------------------------
 * @return [List] | false
 */
/** 
 * Replace $old-value by $new-value in $list
 * -------------------------------------------------------------------------------
 * @dependence `purge()`
 * -------------------------------------------------------------------------------
 * @example replace( (a, b, c), b, z )         => a, z, c
 * @example replace( (a, b, c), y, z )         => a, b, c
 * @example replace( (a, b, c a), a, z )       => z, b, c z
 * @example replace( (a, b, c a), a, z, true ) => z, b, c z
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $old-value [Literal] : value to replace
 * @param $new-value [Literal] : new value for $old-value
 * @param $recursive [Boolean] : enable / disable recursivity
 * -------------------------------------------------------------------------------
 * @return [List]
 */
/**
 * Replace value at $index from $list by $value
 * -------------------------------------------------------------------------------
 * @dependence `purge()`
 * -------------------------------------------------------------------------------
 * @example replace-nth( (a, b, c),   2, z ) => a, z, c
 * @example replace-nth( (a, b, c),   0, z ) => error
 * @example replace-nth( (a, b, c),  -1, z ) => a, b, z
 * @example replace-nth( (a, b, c),  10, z ) => error
 * @example replace-nth( (a, b, c), -10, z ) => error
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $index [Number] : index to update
 * @param $value [Literal] : new value for index $index
 * -------------------------------------------------------------------------------
 * @raise [Error] if $index isn't an integer
 * @raise [Error] if $index is 0
 * @raise [Error] if abs value of $index is strictly greater than length of $list
 * -------------------------------------------------------------------------------
 * @return [List] | false
 */
/**
 * Reverses the order of $list
 * -------------------------------------------------------------------------------
 * @example reverse( (a, b, c) )         => c, b, a
 * @example reverse( (a, b, c a) )       => c a, b, a
 * @example reverse( (a, b, c a), true ) => a c, b, a
 * @example reverse( a )                 => a
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $recursive [Boolean] : enable / disable recursivity
 * -------------------------------------------------------------------------------
 * @return [List]
 */
/**
 * Slices $list between $start and $end
 * -------------------------------------------------------------------------------
 * @example slice( (a, b, c, d),  2, 3 ) => b, c
 * @example slice( (a, b, c, d),  3, 2 ) => error
 * @example slice( (a, b, c, d),  3, 5 ) => error
 * @example slice( (a, b, c, d), -1, 3 ) => error
 * @example slice( (a, b, c, d),  0, 3 ) => error
 * @example slice( (a, b, c, d),  3, 3 ) => c
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $start [Number] : start index
 * @param $end [Number] : end index
 * -------------------------------------------------------------------------------
 * @raise [Error] if $start or $end aren't integers
 * @raise [Error] if $start is greater than $end
 * @raise [Error] if $start or $end is strictly lesser than 1
 * @raise [Error] if $start is strictly greater than length of $list
 * @raise [Error] if $end is strictly greater than length of $list
 * -------------------------------------------------------------------------------
 * @return [List] | false
 */
/**
 * Sum up all unitless values in $list
 * -------------------------------------------------------------------------------
 * @example sum( (1 2 3 4 5) )         => 15
 * @example sum( (1 a 2 b 3) )         => 6
 * @example sum( (10px 3em 5%) )       => 0
 * @example sum( (10px 3em 5%, true) ) => 18
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $force [Boolean] : enable / disable parseInt
 * -------------------------------------------------------------------------------
 * @return [Number]
 */
/**
 * Joins all elements of $list with $glue
 * -------------------------------------------------------------------------------
 * @example to-string( (a, b, c) )      => abc
 * @example to-string( (a, b, c), '-' ) => a-b-c
 * @example to-string( (a, b c, d) )    => abcd
 * -------------------------------------------------------------------------------
 * @param $list [List] : list
 * @param $glue [String] : value to use as a join string
 * @param $is-nested [Boolean] : strictly internal boolean for recursivity
 * -------------------------------------------------------------------------------
 * @return [String]
 */
